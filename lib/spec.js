// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var API, Token, User, api, appid, auth, getToken, initUser, logger, mongo, passport, saveToken, secret, wechat;

  passport = require('passport');

  auth = require('./auth');

  mongo = require('./database/mongo');

  wechat = require('wechat');

  API = require('wechat-api');

  appid = 'wx1f9fe13fd3655a8d';

  secret = '2a3792094fc7e3b91a4920a8afb0a0c1';

  Token = require('../models').Token;

  User = require('../models').User;

  logger = require('log4js').getDefaultLogger();

  getToken = function(cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        logger.error('GetTokenError:' + err);
        return cb(null, null);
      } else if (result) {
        if (new Date().getTime() - result.get_ts.getTime() < 300000) {
          return cb(null, {
            accessToken: result.token
          });
        } else {
          return cb(null, null);
        }
      } else {
        return cb(null, null);
      }
    });
  };

  saveToken = function(token, cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        cb(null, null);
        return logger.error('SaveTokenError:' + err);
      } else if (result && result.token) {
        result.token = token.accessToken;
        result.get_ts = new Date();
        return result.save(cb);
      } else {
        token = new Token({
          appid: appid,
          secret: secret,
          token: token.accessToken,
          get_ts: new Date()
        });
        return token.save(cb);
      }
    });
  };

  api = new API(appid, secret, getToken, saveToken);

  initUser = function(openid, callback) {
    return User.findOne({
      openid: openid
    }, function(err, result) {
      if (err) {
        logger.error(err);
        return callback(err);
      } else if (result) {
        console.log('UserInfoGot:' + JSON.stringify(result));
        return callback(null, result);
      } else {
        return api.getUser(openid, function(err, result) {
          var user;
          console.log('UserInfoInited:' + JSON.stringify(result));
          if (!err) {
            user = new User(result);
            user.created_at = new Date();
            return user.save(callback);
          } else {
            return callback(err);
          }
        });
      }
    });
  };

  module.exports = function(app) {
    var config, reply1;
    config = {
      token: 'wechat',
      appid: appid,
      encodingAESKey: 'CputhJEkwmqdsGbVer6bqikT79mGvfA6vvWEfZt2Dgn'
    };
    reply1 = function(res) {
      var s;
      s = '欢迎关注爱咖啡公众号，点击下方订餐可享特殊优惠哦^_^';
      return res.reply(s);
    };
    app.use('/wechat', wechat(config, function(req, res, next) {
      var message;
      message = req.weixin;
      console.log('WXM:' + JSON.stringify(message));
      if (message.Event === 'subscribe') {
        return initUser(message.FromUserName, function(err, result) {
          return reply1(res);
        });
      } else {
        return reply1(res);
      }
    }));
    app.on('middleware:after:session', function(args) {
      passport.use(auth.localStrategy());
      app.use(passport.initialize());
      app.use(passport.session());
      app.use(auth.injectUser());
      passport.serializeUser(auth.serialize);
      return passport.deserializeUser(auth.deserialize);
    });
    return {
      onconfig: function(config, next) {
        var Manager;
        mongo.config(config.get('mongo'));
        Manager = require('../models/index').Manager;
        Manager.findOne({
          username: 'admin'
        }, function(err, result) {
          var m;
          if (!result) {
            m = new Manager({
              username: 'admin',
              password: '666666'
            });
            return m.save(function(err, result) {
              if (err) {
                return console.log(err);
              } else {
                return console.log(result);
              }
            });
          }
        });
        return next(null, config);
      }
    };
  };

}).call(this);
