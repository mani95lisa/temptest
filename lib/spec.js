// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var API, EventProxy, LotteryRecord, Token, User, api, appid, auth, getToken, initUser, logger, mongo, passport, saveToken, secret, wechat;

  passport = require('passport');

  auth = require('./auth');

  mongo = require('./database/mongo');

  wechat = require('wechat');

  API = require('wechat-api');

  appid = 'wx1f9fe13fd3655a8d';

  secret = '2a3792094fc7e3b91a4920a8afb0a0c1';

  Token = require('../models').Token;

  User = require('../models').User;

  LotteryRecord = require('../models').LotteryRecord;

  logger = require('log4js').getDefaultLogger();

  EventProxy = require('eventproxy');

  getToken = function(cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        logger.error('GetTokenError:' + err);
        return cb(null, null);
      } else if (result) {
        if (new Date().getTime() - result.get_ts.getTime() < 300000) {
          return cb(null, {
            accessToken: result.token
          });
        } else {
          return cb(null, null);
        }
      } else {
        return cb(null, null);
      }
    });
  };

  saveToken = function(token, cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        cb(null, null);
        return logger.error('SaveTokenError:' + err);
      } else if (result && result.token) {
        result.token = token.accessToken;
        result.get_ts = new Date();
        return result.save(cb);
      } else {
        token = new Token({
          appid: appid,
          secret: secret,
          token: token.accessToken,
          get_ts: new Date()
        });
        return token.save(cb);
      }
    });
  };

  api = new API(appid, secret, getToken, saveToken);

  initUser = function(openid, callback) {
    return User.findOne({
      openid: openid
    }, function(err, result) {
      if (err) {
        logger.error(err);
        return callback(err);
      } else if (result) {
        logger.trace('UserInfoGot:' + JSON.stringify(result));
        return callback(null, result);
      } else {
        return api.getUser(openid, function(err, result) {
          var user;
          logger.trace('UserInfoInited:' + JSON.stringify(result));
          if (!err) {
            user = new User(result);
            user.created_at = new Date();
            return user.save(callback);
          } else {
            return callback(err);
          }
        });
      }
    });
  };

  module.exports = function(app) {
    var config, reply1;
    app.on('middleware:after:session', function(args) {
      passport.use(auth.localStrategy());
      app.use(passport.initialize());
      app.use(auth.injectUser());
      passport.serializeUser(auth.serialize);
      return passport.deserializeUser(auth.deserialize);
    });
    config = {
      token: 'wechat',
      appid: appid,
      encodingAESKey: 'YN8K5TKe0aY2fBmYGKHPpDNxu4TRnD7hSyt8wVwb3dw'
    };
    reply1 = function(res) {
      var lottery_url, s;
      lottery_url = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx1f9fe13fd3655a8d&redirect_uri=http://rsct.swift.tf/init_auto&state=c___weixin;;p___lottery;;id___5514fa807fa5ed31c0408bd0&response_type=code&scope=snsapi_base&connect_redirect=1#wechat_redirect';
      s = '欢迎关注润石创投服务号，我们将竭诚为您服务！\n\n<a href="' + lottery_url + '">正版大白求收留 猛戳免费带回家</a>\n\n客服电话：400-690-8862\n官方网址：<a href="http://www.rsct.com">www.rsct.com</a>';
      return res.reply(s);
    };
    app.use('/wechat', wechat(config, function(req, res, next) {
      var address, arr, content, ep, lid, message, mobile, openid, q, saveInfo, truename, wxsession;
      message = req.weixin;
      logger.trace('WXM:' + JSON.stringify(message));
      content = message.Content;
      if (message.Event === 'subscribe') {
        return initUser(message.FromUserName, function(err, result) {
          return reply1(res);
        });
      } else {
        if (req.session && !req.session.r) {
          req.session.r = Math.random();
        }
        console.log('WXSession:' + req.wxsession + '-' + req.session);
        wxsession = req.wxsession ? req.wxsession : {};
        openid = message.FromUserName;
        if (content === '领奖') {
          q = {
            openid: openid,
            status: true,
            dispatched: false
          };
          return LotteryRecord.find(q).populate('lottery', 'name').exec(function(err, result) {
            var s;
            if (err) {
              logger.error('FindLRError:' + err);
              return res.reply('系统出错，请稍候再试');
            } else if (result && result.length) {
              wxsession.lid = result[0]._id;
              wxsession.input_address = true;
              s = '系统查询到您中了以下活动的奖品：\n';
              result.forEach(function(r) {
                return s += r.lottery.name + '\n';
              });
              return User.findOne({
                openid: openid
              }, 'mobile truename address', function(err, result) {
                var info;
                info = result.truename + ' ' + result.mobile + ' ' + result.address;
                if (result.address) {
                  s += '\n 系统查询到您曾使用过收货信息为：\n' + info + '\n 如果继续使用该地址请回复Y，重新输入请回复N';
                  wxsession.userinfo = info;
                  wxsession.hasAddress = true;
                } else {
                  s += '请输入您的收件人姓名、手机号码和收件地址，我们将会尽快为您派发奖品（以空格隔开，如：收件人 手机号码 收货地址）';
                }
                return res.reply(s);
              });
            } else {
              return res.reply('未查询到中奖结果，请您关注并参与其它抽奖活动，感谢您的对润石创投的支持！');
            }
          });
        } else {
          if (content && wxsession.input_address) {
            ep = new EventProxy();
            saveInfo = function(truename, address, mobile) {
              ep.all('lr', 'user', function() {
                wxsession.input_address = false;
                return res.reply('信息已经提交成功，我们会尽快为您派发奖品，请耐心等待');
              });
              ep.fail(function(err) {
                logger.error('SaveAddressError:' + err);
                return res.reply('抱歉，系统出错，请稍候再试');
              });
              LotteryRecord.findByIdAndUpdate(lid, {
                $set: {
                  truename: truename,
                  address: address,
                  mobile: mobile
                }
              }, ep.done('lr'));
              return User.findOneAndUpdate(openid, {
                $set: {
                  truename: truename,
                  address: address
                }
              }, ep.done('user'));
            };
            if (wxsession.hasAddress) {
              if (content === 'Y' || content === 'y') {
                arr = wxsession.userinfo.split(' ');
                return saveInfo(arr[0], arr[2], arr[1]);
              } else if (content === 'N' || content === 'n') {
                wxsession.hasAddress = false;
                return res.reply('请输入您的收件人姓名、手机号码和收件地址，我们将会尽快为您派发奖品（以空格隔开，如：收件人 手机号码 收货地址）');
              } else {
                return res.reply('输入错误，请输入 Y 或者 N');
              }
            } else {
              lid = wxsession.lid;
              arr = content.split(' ');
              mobile = arr[1];
              if (arr.length < 3 || mobile.length !== 11) {
                return res.reply('格式不正确，请注意在收件人和手机号码后面添加空格及手机号码是否正确');
              } else {
                truename = arr[0];
                address = content.replace(truename + ' ', '');
                return saveInfo(truename, address, mobile);
              }
            }
          } else {
            return reply1(res);
          }
        }
      }
    }));
    return {
      onconfig: function(config, next) {
        var Manager;
        mongo.config(config.get('mongo'));
        Manager = require('../models/index').Manager;
        Manager.findOne({
          username: 'admin'
        }, function(err, result) {
          var m;
          if (!result) {
            m = new Manager({
              username: 'admin',
              password: '666666'
            });
            return m.save(function(err, result) {
              if (err) {
                return console.log(err);
              } else {
                return console.log(result);
              }
            });
          }
        });
        return next(null, config);
      }
    };
  };

}).call(this);
