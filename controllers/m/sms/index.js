// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, Log, SMS, UpdateObject, User, auth, logger, models, moment, sms, utils;

  models = require('../../../models');

  SMS = models.SMS;

  utils = require('../../../lib/utils');

  UpdateObject = utils.updateObject;

  auth = require('../../../lib/auth');

  Log = require('../../../lib/log');

  logger = require('log4js').getDefaultLogger();

  sms = require('../../../lib/sms');

  moment = require('moment');

  EventProxy = require('eventproxy');

  User = models.User;

  module.exports = function(router) {
    router.get('/list', auth.isAuthenticated(), function(req, res) {
      var data, ep, options, query;
      data = req.query;
      ep = new EventProxy();
      ep.all('count', 'result', function(count, result) {
        return res.json({
          count: count,
          result: result,
          pageSize: data.pageSize
        });
      });
      if (!data.pageSize) {
        data.pageSize = 10;
      }
      options = {
        sort: {
          created_at: -1
        }
      };
      if (data.page) {
        options.skip = (data.page - 1) * data.pageSize;
        options.limit = data.pageSize;
      }
      query = {};
      if (data.mobile) {
        query = {
          mobile: data.mobile
        };
      }
      SMS.find(query, null, options, ep.done('result'));
      return SMS.count(query, ep.done('count'));
    });
    router.get('/left', auth.isAuthenticated(), function(req, res) {
      return sms.left(function(err, result) {
        if (err) {
          return res.json({
            err: err
          });
        } else {
          return res.json({
            result: result
          });
        }
      });
    });
    return router.get('/code', function(req, res) {
      var data, date, mobile;
      data = req.query;
      mobile = parseInt(data.mobile);
      if (!mobile || data.mobile.length !== 11) {
        return res.json({
          err: '手机号码格式错误'
        });
      } else {
        date = moment().subtract(1, 'm').toDate();
        return SMS.findOne({
          mobile: mobile,
          created_at: {
            $gt: date
          }
        }, function(err, result) {
          var code, content, ep, value;
          if (err) {
            logger.error('Code:' + err);
            return res.json({
              err: '获取验证码出错'
            });
          } else if (result) {
            value = (result.created_at.getTime() - date.getTime()) / 1000;
            return res.json({
              err: '请在 ' + value + '秒 后再试'
            });
          } else {
            code = utils.verifyCode();
            content = '您的验证码是 ' + code;
            ep = new EventProxy();
            ep.all('sms', 'user', function() {
              return res.json({
                result: true
              });
            });
            ep.fail(function(err) {
              logger.error('CodeSave:' + err);
              return res.json({
                err: '获取验证码出错，请再试一次'
              });
            });
            return sms.send(mobile, content, function(err, result) {
              var s;
              if (err) {
                logger.error('SMSSend:' + err);
                return res.json({
                  err: '发送验证码出错，请再试一次'
                });
              } else {
                s = new SMS({
                  mobile: mobile,
                  content: content,
                  created_at: new Date()
                });
                s.save(ep.done('sms'));
                return User.findOne({
                  mobile: mobile
                }, function(err, result) {
                  var user;
                  if (err) {
                    return res.json({
                      err: '获取验证码出错，请再试一次'
                    });
                  } else if (result) {
                    logger.trace('UpdateUserPWD:' + mobile);
                    result.password = code;
                    return result.save(ep.done('user'));
                  } else {
                    logger.trace('InitUser:' + mobile);
                    user = new User({
                      mobile: mobile,
                      password: code
                    });
                    return user.save(ep.done('user'));
                  }
                });
              }
            });
          }
        });
      }
    });
  };

}).call(this);
