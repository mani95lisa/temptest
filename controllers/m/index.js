// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, Lottery, LotteryRecord, Manager, User, auth, logger, models, moment, passport;

  auth = require('../../lib/auth');

  EventProxy = require('eventproxy');

  models = require('../../models/index');

  Manager = models.Manager;

  User = models.User;

  Lottery = models.Lottery;

  LotteryRecord = models.LotteryRecord;

  moment = require('moment');

  logger = require('log4js').getDefaultLogger();

  passport = require('passport');

  module.exports = function(router) {
    router.post('/login', function(req, res) {
      var data;
      data = req.body;
      return passport.authenticate('local', {
        successRedirect: req.session.goingTo || '/admin',
        failureRedirect: '/',
        failureFlash: true
      })(req, res, function(value) {
        if (value) {
          return res.render('login', {
            err: value
          });
        } else {
          return res.redirect(req.session.goingTo || '/admin');
        }
      });
    });
    return router.get('/count', auth.isAuthenticated(), function(req, res) {
      var d, ep;
      ep = new EventProxy();
      ep.all('user', 'user1', 'user2', 'lottery', 'record', 'got', 'dispatched', function(c1, nu, nru, c2, c3, c4, c5) {
        return res.json({
          user: c1,
          user1: nu
        }, user2, nru, {
          lottery: c2,
          record: c3,
          got: c4,
          dispatched: c5
        });
      });
      ep.fail(function(err) {
        logger.error(err);
        return res.json({
          err: JONS.stringify(err)
        });
      });
      d = moment(moment().format('YYYY-MM-DD')).toDate();
      console.log(typeof d);
      User.count({}, ep.done('user'));
      User.count({
        created_at: {
          $gte: new Date()
        }
      }, ep.done('user1'));
      User.count({
        mobile: {
          $exists: true,
          created_at: {
            $gte: new Date()
          }
        }
      }, ep.done('user2'));
      Lottery.count({}, ep.done('lottery'));
      LotteryRecord.count({}, ep.done('record'));
      LotteryRecord.count({
        status: true
      }, ep.done('got'));
      return LotteryRecord.count({
        dispatched: true
      }, ep.done('dispatched'));
    });
  };

}).call(this);
