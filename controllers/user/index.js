// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, UpdateObject, User, auth, logger, models, moment;

  User = require('../../models/index').User;

  auth = require('../../lib/auth');

  UpdateObject = require('../../lib/utils').updateObject;

  EventProxy = require('eventproxy');

  models = require('../../models/index');

  moment = require('moment');

  logger = require('log4js').getDefaultLogger();

  module.exports = function(router) {
    router.post('/update', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      return User.findById(data._id, function(err, result) {
        var diff;
        if (err) {
          logger.error('UFind:' + err);
          return res.json({
            err: err
          });
        } else {
          diff = UpdateObject(result, data, ['created_at']);
          return result.save(function(err, result) {
            if (err) {
              logger.error('PUpdate:' + err);
              return res.json({
                err: err
              });
            } else {
              console.log(diff);
              return res.json({
                result: result
              });
            }
          });
        }
      });
    });
    router.post('/login', function(req, res) {
      var data;
      data = req.query;
      return User.getAuthenticated(data.mobile, data.code, function(err, result) {
        if (err) {
          logger.error('Login:' + data.mobile + '&' + err);
          return res.json({
            err: err
          });
        } else {
          return res.json({
            result: result
          });
        }
      });
    });
    return router.get('/list', auth.isAuthenticated(), function(req, res) {
      var data, ep, options, query;
      data = req.query;
      ep = new EventProxy();
      ep.all('count', 'result', function(count, result) {
        return res.json({
          count: count,
          result: result,
          pageSize: data.pageSize
        });
      });
      if (!data.pageSize) {
        data.pageSize = 10;
      }
      options = {
        sort: {
          created_at: -1
        }
      };
      if (data.page) {
        options.skip = (data.page - 1) * data.pageSize;
        options.limit = data.pageSize;
      }
      query = {};
      if (data.keywords) {
        query = {
          mobile: new RegExp(data.keywords, 'i')
        };
      }
      User.find(query, null, options, ep.done('result'));
      return User.count(query, ep.done('count'));
    });
  };

}).call(this);
