// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var API, Dict, EventProxy, Lottery, LotteryRecord, Token, User, api, appid, auth, getConfig, getParams, getToken, getUrl, get_js_sdk_ticket, home_url, host, inTime, logger, menu, models, moment, request, saveToken, save_js_sdk_ticket, secret;

  auth = require('../lib/auth');

  API = require('wechat-api');

  appid = 'wx1f9fe13fd3655a8d';

  secret = '2a3792094fc7e3b91a4920a8afb0a0c1';

  models = require('../models/index');

  User = models.User;

  Token = models.Token;

  Dict = models.Dict;

  Lottery = models.Lottery;

  LotteryRecord = models.LotteryRecord;

  EventProxy = require('eventproxy');

  logger = require('log4js').getDefaultLogger();

  request = require('request');

  moment = require('moment');

  getToken = function(cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        logger.error('GetTokenError:' + err);
        return cb(null, null);
      } else if (result) {
        if (new Date().getTime() - result.get_ts.getTime() < 300000) {
          return cb(null, {
            accessToken: result.token
          });
        } else {
          return cb(null, null);
        }
      } else {
        return cb(null, null);
      }
    });
  };

  saveToken = function(token, cb) {
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        cb(null, null);
        return logger.error('SaveTokenError:' + err);
      } else if (result && result.token) {
        result.token = token.accessToken;
        result.get_ts = new Date();
        return result.save(cb);
      } else {
        token = new Token({
          appid: appid,
          secret: secret,
          token: token.accessToken,
          get_ts: new Date()
        });
        return token.save(cb);
      }
    });
  };

  api = new API(appid, secret, getToken, saveToken);

  get_js_sdk_ticket = function(type, cb) {
    console.log('get js ticket', type);
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      if (err) {
        logger.error('GetJSTicketError:' + err);
        return cb(null, null);
      } else if (result && result.js_ticket) {
        return cb(null, {
          ticket: result.js_ticket,
          expireTime: result.js_ticket_expireTime
        });
      } else {
        return cb(null, null);
      }
    });
  };

  save_js_sdk_ticket = function(type, ticket, cb) {
    console.log('save js ticket', type, ticket);
    return Token.findOne({
      appid: appid
    }, function(err, result) {
      var token;
      if (err) {
        logger.error('SaveJSTicketError:' + err);
        return cb(null, null);
      } else if (result) {
        result.js_ticket = ticket.ticket;
        result.js_ticket_expireTime = ticket.expireTime;
        return result.save(cb);
      } else {
        token = new Token({
          appid: appid,
          secret: secret,
          js_ticket: ticket.ticket,
          js_ticket_expireTime: ticket.expireTime
        });
        return token.save(cb);
      }
    });
  };

  api.registerTicketHandle(get_js_sdk_ticket, save_js_sdk_ticket);

  host = 'http://rsct.swift.tf';

  home_url = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=' + appid + '&redirect_uri=' + host + '/init_auto&state=c_|_weixin;;p_|_lottery&response_type=code&scope=snsapi_base&connect_redirect=1#wechat_redirect';

  getUrl = function(channel, page) {
    return 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=' + appid + '&redirect_uri=' + host + '/init_auto&state=c_|_' + channel + ';;p_|_' + page + '&response_type=code&scope=snsapi_base&connect_redirect=1#wechat_redirect';
  };

  menu = {
    'button': [
      {
        name: '我的账户',
        type: 'view',
        url: 'http://www.rsct.com/finance/website/to_login.action'
      }, {
        name: '帮你赚钱',
        type: 'view',
        url: 'http://www.rsct.com/finance/website/index.action'
      }, {
        name: '关于润石',
        type: 'view',
        url: 'http://www.rsct.com/finance/website/dima.action'
      }
    ]
  };

  getConfig = function(req, callback) {
    var url;
    url = host + req.url;
    console.log('url:' + url);
    return api.getJsConfig({
      debug: true,
      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo'],
      url: url
    }, function(err, result) {
      return callback(err, result);
    });
  };

  inTime = function(times) {
    var now, result;
    now = moment().valueOf();
    if (!times || !times.length) {
      return false;
    } else {
      result = false;
      times.forEach(function(t) {
        var e, s;
        s = moment(t.start, 'HH:mm').valueOf();
        e = moment(t.end, 'HH:mm').valueOf();
        if (s <= now && e >= now) {
          return result = true;
        }
      });
      return result;
    }
  };

  getParams = function(state) {
    var arr, params;
    params = {};
    arr = state.split(';;');
    arr.forEach(function(item) {
      var temp;
      temp = item.split('_|_');
      if (temp.length === 2) {
        return params[temp[0]] = temp[1];
      }
    });
    return params;
  };

  module.exports = function(router) {
    var init;
    init = function(req, res, result) {
      var params, state;
      state = req.query.state;
      params = getParams(state);
      console.log('State:' + state + 'Page:' + params.p);
      return User.findOne({
        openid: result.openid
      }, function(err, userResult) {
        var ep, user;
        if (err) {
          logger.error('UserFindError:' + err);
          return res.json({
            err: err
          });
        } else {
          ep = new EventProxy();
          ep.on('ok', function() {
            return getConfig(req, function(err, config) {
              var id, page;
              if (err) {
                logger.error('ConfigError:' + err);
              }
              req.session.user = user._id;
              page = params.p;
              if (page === 'lottery') {
                id = params.id;
                if (!id) {
                  return res.json({
                    status: false
                  });
                } else {
                  return Lottery.findById(id, function(err, result) {
                    var share_url;
                    if (err) {
                      return logger.error(err);
                    } else if (result) {
                      result.joined += 10000;
                      share_url = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=' + appid + '&redirect_uri=' + host + '/init_auto&state=c_|_' + params.c + ';;p_|_' + params.p + ';;id_|_' + id + '&response_type=code&scope=snsapi_base&connect_redirect=1#wechat_redirect';
                      return res.render('lottery', {
                        joined: result.joined,
                        config: config,
                        desc: result.description,
                        url: share_url,
                        img: result.thumb
                      });
                    }
                  });
                }
              } else {
                return res.json({
                  status: false
                });
              }
            });
          });
          user = '';
          if (userResult) {
            user = userResult;
            user.last_login = new Date();
            user.login_times++;
            return user.save(function(err, result) {
              return ep.emit('ok');
            });
          } else {
            user = new User({
              openid: result.openid,
              last_login: new Date(),
              created_at: new Date()
            });
            user.nickname = result.nickname;
            user.sex = result.sex;
            user.province = result.province;
            user.city = result.city;
            user.country = result.country;
            user.headimgurl = result.headimgurl;
            return user.save(function(err, result) {
              if (err) {
                logger.error('UserSaveError:' + err);
                return res.json({
                  err: err
                });
              } else {
                logger.trace('UserSaved:' + JSON.stringify(result));
                return ep.emit('ok');
              }
            });
          }
        }
      });
    };
    router.get('/menu', function(req, res) {
      return api.createMenu(menu, function(err, result) {
        if (err) {
          return logger.error(err);
        } else {
          logger.trace('menu setted:', result);
          return api.getMenu(function(err, result) {
            return res.json(result);
          });
        }
      });
    });
    router.get('/init_auto', function(req, res) {
      var data, headers;
      headers = req.headers;
      data = req.query;
      if (!data.code) {
        res.jsonp({
          status: false
        });
        return;
      }
      console.log('Inited2:' + JSON.stringify(data));
      return request.get('https://api.weixin.qq.com/sns/oauth2/access_token?appid=' + appid + '&secret=' + secret + '&code=' + data.code + '&grant_type=authorization_code', function(err, result) {
        var access_token, openid, refresh_token;
        if (err) {
          logger.error('UserCodeError2:' + err);
          return res.json({
            status: false
          });
        } else {
          result = JSON.parse(result.body);
          console.log('Inited2Result:' + JSON.stringify(result));
          if (result.errcode) {
            logger.error('UserCodeError2:' + result.errmsg);
            return res.json({
              status: false
            });
          } else {
            access_token = result.access_token;
            refresh_token = result.refresh_token;
            openid = result.openid;
            if (!access_token) {
              logger.error('UserAccessToeknError:' + JSON.stringify(result));
              return res.json({
                status: false
              });
            } else {
              return request.get('https://api.weixin.qq.com/sns/userinfo?access_token=' + access_token + '&openid=' + openid + '&lang=zh_CN', function(err, result) {
                var reinit;
                reinit = function() {
                  return res.redirect('https://open.weixin.qq.com/connect/oauth2/authorize?appid=' + appid + '&redirect_uri=' + host + '/init&response_type=code&scope=snsapi_userinfo&state=' + data.state + '&connect_redirect=1#wechat_redirect');
                };
                if (err) {
                  logger.error('UserCodeError3:' + err);
                  return reinit();
                } else {
                  result = JSON.parse(result.body);
                  if (result.errcode) {
                    logger.error('UserInfoError:' + result.errmsg);
                    return reinit();
                  } else {
                    logger.trace('Init:' + JSON.stringify(result));
                    return init(req, res, result);
                  }
                }
              });
            }
          }
        }
      });
    });
    router.get('/init', function(req, res) {
      var data;
      data = req.query;
      if (!data.code) {
        res.jsonp({
          status: false
        });
        return;
      }
      return request.get('https://api.weixin.qq.com/sns/oauth2/access_token?appid=' + appid + '&secret=' + secret + '&code=' + data.code + '&grant_type=authorization_code', function(err, result) {
        var access_token, openid, refresh_token;
        if (err) {
          logger.error('UserCodeError1:' + err);
          return res.jsonp({
            status: false
          });
        } else {
          result = JSON.parse(result.body);
          if (result.errcode) {
            logger.error('UserCodeError2:' + result.errmsg);
            return res.jsonp({
              status: false
            });
          } else {
            access_token = result.access_token;
            refresh_token = result.refresh_token;
            openid = result.openid;
            if (!access_token) {
              logger.error('UserAccessToeknError:' + JSON.stringify(result));
              return res.jsonp({
                status: false
              });
            } else {
              return request.get('https://api.weixin.qq.com/sns/userinfo?access_token=' + access_token + '&openid=' + openid + '&lang=zh_CN', function(err, result) {
                if (err) {
                  logger.error('UserCodeError3:' + err);
                  return res.jsonp({
                    status: false
                  });
                } else {
                  result = JSON.parse(result.body);
                  if (result.errcode) {
                    logger.error('UserInfoError:' + result.errmsg);
                    return res.jsonp({
                      status: false
                    });
                  } else {
                    return init(req, res, result);
                  }
                }
              });
            }
          }
        }
      });
    });
    router.get('/', function(req, res) {
      return res.render('login');
    });
    router.get('/test2', function(req, res) {
      return Order.find({}, {
        products: {
          $elemMatch: {
            name: req.query.name
          }
        }
      }, function(err, result) {
        return res.json({
          err: err,
          result: result
        });
      });
    });
    router.get('/pages', function(req, res) {
      return res.render('pages', {
        url: home_url
      });
    });
    router.get('/lottery', function(req, res) {
      return res.render('lottery', {
        joined: 0
      });
    });
    router.get('/draw_lottery', function(req, res) {
      var arr;
      arr = [
        {
          value: 1234567,
          status: '未开奖'
        }
      ];
      arr.push({
        value: 1234567,
        status: '未开奖'
      });
      arr.push({
        value: 1234567,
        status: '未开奖'
      });
      return res.render('success', {
        nums: arr
      });
    });
    router.get('/sign_up', function(req, res) {
      return res.render('sign_up');
    });
    router.post('/do_sign_up', function(req, res) {
      return res.redirect('/draw_lottery');
    });
    return router.get('/admin', auth.isAuthenticated(), function(req, res) {
      var nav;
      nav = [
        {
          path: 'dashboard',
          name: '仪表盘',
          icon: 'fa fa-dashboard'
        }, {
          path: 'lottery',
          name: '抽奖管理',
          icon: 'fa fa-list'
        }, {
          path: 'joined',
          name: '得奖管理',
          icon: 'fa fa-gift'
        }, {
          path: 'user',
          name: '用户管理',
          icon: 'fa fa-users'
        }, {
          path: 'setting',
          name: '系统设置',
          icon: 'fa fa-cogs'
        }
      ];
      return res.render('admin', {
        nav: nav
      });
    });
  };

}).call(this);
