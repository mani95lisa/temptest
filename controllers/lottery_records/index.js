// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, LotteryRecord, UpdateObject, auth, logger, models, moment;

  models = require('../../models');

  LotteryRecord = models.LotteryRecord;

  UpdateObject = require('../../lib/utils').updateObject;

  auth = require('../../lib/auth');

  EventProxy = require('eventproxy');

  moment = require('moment');

  logger = require('log4js').getDefaultLogger();

  module.exports = function(router) {
    return router.get('/list', auth.isAuthenticated(), function(req, res) {
      var data, ep, filter, options, query;
      data = req.query;
      ep = new EventProxy();
      ep.all('count', 'result', function(count, result) {
        return res.json({
          count: count,
          result: result,
          pageSize: data.pageSize
        });
      });
      ep.fail(function(err) {
        logger.error(err);
        return res.json({
          err: err
        });
      });
      if (!data.pageSize) {
        data.pageSize = 10;
      }
      options = {
        sort: {
          created_at: -1
        }
      };
      if (data.page) {
        options.skip = (data.page - 1) * data.pageSize;
        options.limit = data.pageSize;
      }
      query = {};
      if (data.keywords) {
        switch (parseInt(data.keywords).toString().length) {
          case 11:
            query['user.mobile'] = data.keywords;
            break;
          case 7:
            query['number'] = data.keywords;
            break;
          default:
            query['lottery.name'] = new RegExp(data.keywords, 'i');
        }
      }
      filter = data.filter;
      switch (filter) {
        case '1':
          query['status'] = false;
          break;
        case '2':
          query['status'] = true;
          break;
        case '3':
          query['dispatched'] = true;
      }
      console.log('LRQuerry:' + JSON.stringify(query));
      LotteryRecord.find(query, null, options).populate('lottery', 'name').populate('user', 'mobile nickname').exec(ep.done('result'));
      return LotteryRecord.count(query, ep.done('count'));
    });
  };

}).call(this);
