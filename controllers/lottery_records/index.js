// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, Lottery, LotteryRecord, UpdateObject, User, auth, logger, models, moment;

  models = require('../../models');

  LotteryRecord = models.LotteryRecord;

  User = models.User;

  Lottery = models.Lottery;

  UpdateObject = require('../../lib/utils').updateObject;

  auth = require('../../lib/auth');

  EventProxy = require('eventproxy');

  moment = require('moment');

  logger = require('log4js').getDefaultLogger();

  module.exports = function(router) {
    return router.get('/list', auth.isAuthenticated(), function(req, res) {
      var data, ep, ep2, filter, options, query;
      data = req.query;
      ep = new EventProxy();
      ep.all('count', 'result', function(count, result) {
        return res.json({
          count: count,
          result: result,
          pageSize: data.pageSize
        });
      });
      ep.fail(function(err) {
        logger.error(err);
        return res.json({
          err: err
        });
      });
      if (!data.pageSize) {
        data.pageSize = 10;
      }
      options = {
        sort: {
          created_at: -1
        }
      };
      if (data.page) {
        options.skip = (data.page - 1) * data.pageSize;
        options.limit = data.pageSize;
      }
      query = {};
      ep2 = new EventProxy();
      ep2.on('ok', function() {
        console.log('LRQuerry:' + JSON.stringify(query));
        LotteryRecord.find(query, null, options).populate('lottery', 'name').populate('user', 'mobile nickname').sort({
          number: 1
        }).exec(ep.done('result'));
        return LotteryRecord.count(query, ep.done('count'));
      });
      filter = data.filter;
      switch (filter) {
        case '1':
          query['status'] = false;
          break;
        case '2':
          query['status'] = true;
          break;
        case '3':
          query['dispatched'] = true;
      }
      if (data.keywords) {
        switch (parseInt(data.keywords).toString().length) {
          case 11:
            return User.findOne({
              mobile: data.keywords
            }, '_id', function(err, result) {
              if (err) {
                res.json({
                  err: err
                });
                return logger.error('FindU:' + err);
              } else {
                if (result) {
                  query['user'] = result._id;
                }
                return ep2.emit('ok');
              }
            });
          case 7:
            query['number'] = {
              $gte: data.keywords
            };
            return ep2.emit('ok');
          default:
            return Lottery.findOne({
              name: new RegExp(data.keywords, 'i')
            }, '_id', function(err, result) {
              if (err) {
                res.json({
                  err: err
                });
                return logger.error('FindL:' + err);
              } else {
                if (result) {
                  query['lottery'] = result._id;
                }
                return ep2.emit('ok');
              }
            });
        }
      } else {
        return ep2.emit('ok');
      }
    });
  };

}).call(this);
