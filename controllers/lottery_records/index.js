// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EventProxy, LotteryRecord, UpdateObject, api, auth, logger, models, moment;

  models = require('../../models');

  LotteryRecord = models.LotteryRecord;

  UpdateObject = require('../../lib/utils').updateObject;

  auth = require('../../lib/auth');

  EventProxy = require('eventproxy');

  moment = require('moment');

  logger = require('log4js').getDefaultLogger();

  api = require('../index').api;

  module.exports = function(router) {
    router.post('/update', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      logger.trace('LotteryRecordUpdate:' + JSON.stringify(data));
      return LotteryRecord.findById(data._id).populate('user', 'openid').populate('lottery', 'name').exec(function(err, result) {
        var diff, lname;
        if (err) {
          logger.error('LRind:' + err);
          return res.json({
            err: err
          });
        } else {
          diff = UpdateObject(result, data, ['created_at', 'lottery', 'user', 'updated_at']);
          lname = result.lottery.name;
          return result.save(function(err, result) {
            if (err) {
              logger.error('LRUpdated:' + err);
              return res.json({
                err: err
              });
            } else {
              if (result.status && result.notify) {
                api.sendMessage('恭喜您于活动【' + lname + '】中奖\n\n' + result.notify + '\n\n（请在输入框输入【领奖】两字进入领奖流程）');
              }
              logger.warn('LRUpdated:' + diff);
              return res.json({
                result: result
              });
            }
          });
        }
      });
    });
    return router.get('/list', auth.isAuthenticated(), function(req, res) {
      var data, ep, filter, options, query;
      data = req.query;
      ep = new EventProxy();
      ep.all('count', 'result', function(count, result) {
        result.forEach(function(r) {
          return r.status = r.status ? '已中奖' : '未中奖';
        });
        return res.json({
          count: count,
          result: result,
          pageSize: data.pageSize
        });
      });
      ep.fail(function(err) {
        logger.error(err);
        return res.json({
          err: err
        });
      });
      if (!data.pageSize) {
        data.pageSize = 10;
      }
      options = {
        sort: {
          created_at: -1
        }
      };
      if (data.page) {
        options.skip = (data.page - 1) * data.pageSize;
        options.limit = data.pageSize;
      }
      query = {};
      if (data.keywords) {
        switch (parseInt(data.keywords).toString().length) {
          case 11:
            query['user.mobile'] = data.keywords;
            break;
          case 7:
            query['number'] = data.keywords;
            break;
          default:
            query['lottery.name'] = new RegExp(data.keywords, 'i');
        }
      }
      filter = data.filter;
      switch (filter) {
        case '1':
          query['status'] = false;
          break;
        case '2':
          query['status'] = true;
          break;
        case '3':
          query['dispatched'] = true;
      }
      console.log('LRQuerry:' + JSON.stringify(query));
      LotteryRecord.find(query, null, options).populate('lottery', 'name').populate('user', 'mobile nickname').exec(ep.done('result'));
      return LotteryRecord.count(query, ep.done('count'));
    });
  };

}).call(this);
